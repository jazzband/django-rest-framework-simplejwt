.. _customizing_token_claims:

Customizing token claims
========================

You can include additional user attributes in the token claims by specifying them
in the ``CUSTOM_TOKEN_USER_ATTRIBUTES``.

You can also specify functions to return the value for custom claims by using
``CUSTOM_TOKEN_CALLABLE_ATTRIBUTES``.

.. code-block:: python

  # settings.py
  SIMPLE_JWT = {
  ...,
  'CUSTOM_TOKEN_CALLABLE_ATTRIBUTES': [
        {'attr_name': 'user_services',
         'attr_getter': 'my_module.token_claims.get_user_subscribed_services'
         }
    ]
   }

  # my_module.token_claims.py
  def get_user_subscribed_services(user):
      return user.subscribed_services


Further, you can customize the token claims by extending the appropriate serializer classes. If you wish to customize
the claims contained in web tokens generated by the ``TokenObtainPairView`` and ``TokenObtainSlidingView`` views,
create a subclass for the desired view as well as a subclass for its corresponding
serializer.  Here's an example of how to customize the claims in tokens
generated by the ``TokenObtainPairView``:

.. code-block:: python

  from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
  from rest_framework_simplejwt.views import TokenObtainPairView

  class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
      @classmethod
      def get_token(cls, user):
          token = super().get_token(user)

          # Add custom claims
          token['name'] = user.name
          # ...

          return token

  class MyTokenObtainPairView(TokenObtainPairView):
      serializer_class = MyTokenObtainPairSerializer

Note that the example above will cause the customized claims to be present in
both refresh *and* access tokens which are generated by the view.  This follows
from the fact that the ``get_token`` method above produces the *refresh* token
for the view, which is in turn used to generate the view's access token.

As with the standard token views, you'll also need to include a url route to
your subclassed view.
